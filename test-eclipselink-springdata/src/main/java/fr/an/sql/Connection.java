package fr.an.sql;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Properties;
import java.util.concurrent.Executor;

public interface Connection {
	
	void close()                                   throws SQLException;
	boolean isClosed()                             throws SQLException;

	Statement createStatement()                    throws SQLException;
	PreparedStatement prepareStatement(String sql) throws SQLException;
	CallableStatement prepareCall(String sql)      throws SQLException;
	// also variants with create/prepare(int resultSetType, int resultSetConcurrency)..

	Clob createClob()                                         throws SQLException;
	Blob createBlob()                                         throws SQLException;
	NClob createNClob()                                       throws SQLException;
	SQLXML createSQLXML()                                     throws SQLException;
	Array createArrayOf(String typeName, Object[] elements)   throws SQLException;
	Struct createStruct(String typeName, Object[] attributes) throws SQLException;

	
	void setReadOnly(boolean readOnly)             throws SQLException;
	boolean isReadOnly()                           throws SQLException;
	void setAutoCommit(boolean autoCommit)         throws SQLException;
	boolean getAutoCommit()                        throws SQLException;
	
	void commit()                                  throws SQLException;
	void rollback()                                throws SQLException;
	// for prepare() ... see XAConnection sub-class

	Savepoint setSavepoint()                       throws SQLException;
	Savepoint setSavepoint(String name)            throws SQLException;
	void rollback(Savepoint savepoint)             throws SQLException;
	void releaseSavepoint(Savepoint savepoint)     throws SQLException;

	// TRANSACTION_NONE, TRANSACTION_READ_UNCOMMITTED, TRANSACTION_READ_COMMITTED, 
	// TRANSACTION_REPEATABLE_READ, TRANSACTION_SERIALIZABLE
	void setTransactionIsolation(int level)        throws SQLException;
	int getTransactionIsolation()                  throws SQLException;
	// HOLD_CURSORS_OVER_COMMIT, CLOSE_CURSORS_AT_COMMIT
	void setHoldability(int holdability)           throws SQLException; 
	int getHoldability()                           throws SQLException;

	SQLWarning getWarnings()                       throws SQLException;
	void clearWarnings()                           throws SQLException;
	
	DatabaseMetaData getMetaData()                 throws SQLException;
	void setCatalog(String catalog)                throws SQLException;
	String getCatalog()                            throws SQLException;
	void setSchema(String schema)                  throws SQLException;
	String getSchema()                             throws SQLException;
	
	java.util.Map<String, Class<?>> getTypeMap()   throws SQLException;
	void setTypeMap(java.util.Map<String, Class<?>> map)  throws SQLException;
	
	void setClientInfo(String name, String value)  throws SQLClientInfoException;
	void setClientInfo(Properties properties)      throws SQLClientInfoException;
	String getClientInfo(String name)              throws SQLException;
	Properties getClientInfo()                     throws SQLException;

	String nativeSQL(String sql)                   throws SQLException;

	boolean isValid(int timeout)                   throws SQLException;
	void abort(Executor executor)                  throws SQLException;
	void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException;
	int getNetworkTimeout()                        throws SQLException;



	
	
	
	Statement createStatement(int resultSetType, int resultSetConcurrency)                           throws SQLException;
	PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency)      throws SQLException;
	CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency)           throws SQLException;

	Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;
	PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;
	CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)      throws SQLException;

	PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)                            throws SQLException;
	PreparedStatement prepareStatement(String sql, int columnIndexes[])                              throws SQLException;
	PreparedStatement prepareStatement(String sql, String columnNames[])                             throws SQLException;


}
